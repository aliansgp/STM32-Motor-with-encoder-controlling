
MCUproject3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db8  08004db8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001a4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c47b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ab  00000000  00000000  0002c51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a58  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b64  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6c9  00000000  00000000  00052714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d56d7  00000000  00000000  00060ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001364b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000320c  00000000  00000000  00136504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d30 	.word	0x08004d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004d30 	.word	0x08004d30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <DWT_Delay_Init+0x58>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <DWT_Delay_Init+0x58>)
 800057e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000582:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <DWT_Delay_Init+0x58>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <DWT_Delay_Init+0x58>)
 800058a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <DWT_Delay_Init+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <DWT_Delay_Init+0x5c>)
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <DWT_Delay_Init+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ae:	bf00      	nop
    __ASM volatile ("NOP");
 80005b0:	bf00      	nop
    __ASM volatile ("NOP");
 80005b2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005c0:	2301      	movs	r3, #1
    }
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000edf0 	.word	0xe000edf0
 80005d0:	e0001000 	.word	0xe0001000

080005d4 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <DWT_Delay_us+0x48>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005e2:	f002 fb65 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <DWT_Delay_us+0x4c>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	0c9b      	lsrs	r3, r3, #18
 80005f0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80005fc:	bf00      	nop
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <DWT_Delay_us+0x48>)
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	429a      	cmp	r2, r3
 800060e:	d3f6      	bcc.n	80005fe <DWT_Delay_us+0x2a>
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e0001000 	.word	0xe0001000
 8000620:	431bde83 	.word	0x431bde83

08000624 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <DWT_Delay_ms+0x44>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000632:	f002 fb3d 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <DWT_Delay_ms+0x48>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	099b      	lsrs	r3, r3, #6
 8000640:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800064c:	bf00      	nop
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <DWT_Delay_ms+0x44>)
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f8      	bcc.n	800064e <DWT_Delay_ms+0x2a>
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	e0001000 	.word	0xe0001000
 800066c:	10624dd3 	.word	0x10624dd3

08000670 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <LCD_DATA+0xc4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <LCD_DATA+0xc4>)
 800068a:	8891      	ldrh	r1, [r2, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fe84 	bl	800239c <HAL_GPIO_WritePin>
 8000694:	e007      	b.n	80006a6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <LCD_DATA+0xc4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a26      	ldr	r2, [pc, #152]	; (8000734 <LCD_DATA+0xc4>)
 800069c:	8891      	ldrh	r1, [r2, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe7b 	bl	800239c <HAL_GPIO_WritePin>
    if(Data & 2)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <LCD_DATA+0xc4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <LCD_DATA+0xc4>)
 80006b6:	88d1      	ldrh	r1, [r2, #6]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fe6e 	bl	800239c <HAL_GPIO_WritePin>
 80006c0:	e007      	b.n	80006d2 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <LCD_DATA+0xc4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <LCD_DATA+0xc4>)
 80006c8:	88d1      	ldrh	r1, [r2, #6]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fe65 	bl	800239c <HAL_GPIO_WritePin>
    if(Data & 4)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <LCD_DATA+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <LCD_DATA+0xc4>)
 80006e2:	8911      	ldrh	r1, [r2, #8]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fe58 	bl	800239c <HAL_GPIO_WritePin>
 80006ec:	e007      	b.n	80006fe <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <LCD_DATA+0xc4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <LCD_DATA+0xc4>)
 80006f4:	8911      	ldrh	r1, [r2, #8]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fe4f 	bl	800239c <HAL_GPIO_WritePin>
    if(Data & 8)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <LCD_DATA+0xc4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <LCD_DATA+0xc4>)
 800070e:	8951      	ldrh	r1, [r2, #10]
 8000710:	2201      	movs	r2, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fe42 	bl	800239c <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000718:	e007      	b.n	800072a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LCD_DATA+0xc4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <LCD_DATA+0xc4>)
 8000720:	8951      	ldrh	r1, [r2, #10]
 8000722:	2200      	movs	r2, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fe39 	bl	800239c <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08004d58 	.word	0x08004d58

08000738 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <LCD_CMD+0x60>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <LCD_CMD+0x60>)
 8000748:	89d1      	ldrh	r1, [r2, #14]
 800074a:	2200      	movs	r2, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fe25 	bl	800239c <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8b 	bl	8000670 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <LCD_CMD+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <LCD_CMD+0x60>)
 8000760:	8991      	ldrh	r1, [r2, #12]
 8000762:	2201      	movs	r2, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fe19 	bl	800239c <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LCD_CMD+0x60>)
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff30 	bl	80005d4 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <LCD_CMD+0x60>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <LCD_CMD+0x60>)
 800077a:	8991      	ldrh	r1, [r2, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fe0c 	bl	800239c <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <LCD_CMD+0x60>)
 8000786:	8a1b      	ldrh	r3, [r3, #16]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff23 	bl	80005d4 <DWT_Delay_us>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08004d58 	.word	0x08004d58

0800079c <LCD_Clear>:
void LCD_Clear()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffc9 	bl	8000738 <LCD_CMD>
    LCD_CMD(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff ffc6 	bl	8000738 <LCD_CMD>
    DWT_Delay_us(70);
 80007ac:	2046      	movs	r0, #70	; 0x46
 80007ae:	f7ff ff11 	bl	80005d4 <DWT_Delay_us>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	460a      	mov	r2, r1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	4613      	mov	r3, r2
 80007c4:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d111      	bne.n	80007f0 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	337f      	adds	r3, #127	; 0x7f
 80007d0:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <LCD_CMD>
      LCD_CMD(Low4);
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffa4 	bl	8000738 <LCD_CMD>
    }
    if(r == 2)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d111      	bne.n	800081a <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	3b41      	subs	r3, #65	; 0x41
 80007fa:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff93 	bl	8000738 <LCD_CMD>
      LCD_CMD(Low4);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff8f 	bl	8000738 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff02 	bl	8000624 <DWT_Delay_ms>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_Init>:
void LCD_Init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800083e:	f7ff fe99 	bl	8000574 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8000842:	4b74      	ldr	r3, [pc, #464]	; (8000a14 <LCD_Init+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a74      	ldr	r2, [pc, #464]	; (8000a18 <LCD_Init+0x1f0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d10e      	bne.n	800086a <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <LCD_Init+0x1f4>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a71      	ldr	r2, [pc, #452]	; (8000a1c <LCD_Init+0x1f4>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <LCD_Init+0x1f4>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	e03a      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <LCD_Init+0x1ec>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a6c      	ldr	r2, [pc, #432]	; (8000a20 <LCD_Init+0x1f8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d10e      	bne.n	8000892 <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <LCD_Init+0x1f4>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a67      	ldr	r2, [pc, #412]	; (8000a1c <LCD_Init+0x1f4>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b65      	ldr	r3, [pc, #404]	; (8000a1c <LCD_Init+0x1f4>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	e026      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 8000892:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <LCD_Init+0x1ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <LCD_Init+0x1fc>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d10e      	bne.n	80008ba <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b5e      	ldr	r3, [pc, #376]	; (8000a1c <LCD_Init+0x1f4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a5d      	ldr	r2, [pc, #372]	; (8000a1c <LCD_Init+0x1f4>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <LCD_Init+0x1f4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	e012      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008ba:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <LCD_Init+0x1ec>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a5a      	ldr	r2, [pc, #360]	; (8000a28 <LCD_Init+0x200>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d10d      	bne.n	80008e0 <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <LCD_Init+0x1f4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <LCD_Init+0x1f4>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <LCD_Init+0x1f4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80008e0:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <LCD_Init+0x1ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a4b      	ldr	r2, [pc, #300]	; (8000a14 <LCD_Init+0x1ec>)
 80008e6:	8891      	ldrh	r1, [r2, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd56 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80008f0:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <LCD_Init+0x1ec>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <LCD_Init+0x1ec>)
 80008f6:	88d1      	ldrh	r1, [r2, #6]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fd4e 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <LCD_Init+0x1ec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a43      	ldr	r2, [pc, #268]	; (8000a14 <LCD_Init+0x1ec>)
 8000906:	8911      	ldrh	r1, [r2, #8]
 8000908:	2200      	movs	r2, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fd46 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <LCD_Init+0x1ec>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <LCD_Init+0x1ec>)
 8000916:	8951      	ldrh	r1, [r2, #10]
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fd3e 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <LCD_Init+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <LCD_Init+0x1ec>)
 8000926:	89d1      	ldrh	r1, [r2, #14]
 8000928:	2200      	movs	r2, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fd36 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000930:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <LCD_Init+0x1ec>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <LCD_Init+0x1ec>)
 8000936:	8991      	ldrh	r1, [r2, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fd2e 	bl	800239c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <LCD_Init+0x1ec>)
 8000942:	889a      	ldrh	r2, [r3, #4]
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <LCD_Init+0x1ec>)
 8000946:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000948:	4313      	orrs	r3, r2
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <LCD_Init+0x1ec>)
 800094e:	891b      	ldrh	r3, [r3, #8]
 8000950:	4313      	orrs	r3, r2
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <LCD_Init+0x1ec>)
 8000956:	895b      	ldrh	r3, [r3, #10]
 8000958:	4313      	orrs	r3, r2
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <LCD_Init+0x1ec>)
 800095e:	89db      	ldrh	r3, [r3, #14]
 8000960:	4313      	orrs	r3, r2
 8000962:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <LCD_Init+0x1ec>)
 8000966:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000968:	4313      	orrs	r3, r2
 800096a:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800096c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <LCD_Init+0x1ec>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f107 0214 	add.w	r2, r7, #20
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fb6d 	bl	8002064 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <LCD_Init+0x1ec>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <LCD_Init+0x1ec>)
 8000990:	89d1      	ldrh	r1, [r2, #14]
 8000992:	2200      	movs	r2, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fd01 	bl	800239c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <LCD_Init+0x1ec>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <LCD_Init+0x1ec>)
 80009a0:	8991      	ldrh	r1, [r2, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fcf9 	bl	800239c <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fe60 	bl	8000670 <LCD_DATA>
    DWT_Delay_ms(150);
 80009b0:	2096      	movs	r0, #150	; 0x96
 80009b2:	f7ff fe37 	bl	8000624 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff febe 	bl	8000738 <LCD_CMD>
    DWT_Delay_ms(5);
 80009bc:	2005      	movs	r0, #5
 80009be:	f7ff fe31 	bl	8000624 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f7ff feb8 	bl	8000738 <LCD_CMD>
    DWT_Delay_us(150);
 80009c8:	2096      	movs	r0, #150	; 0x96
 80009ca:	f7ff fe03 	bl	80005d4 <DWT_Delay_us>
    LCD_CMD(0x03);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff feb2 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff feaf 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f7ff feac 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x08);
 80009e0:	2008      	movs	r0, #8
 80009e2:	f7ff fea9 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fea6 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x0C);
 80009ec:	200c      	movs	r0, #12
 80009ee:	f7ff fea3 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fea0 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x06);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f7ff fe9d 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe9a 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x01);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe97 	bl	8000738 <LCD_CMD>
}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08004d58 	.word	0x08004d58
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f023 030f 	bic.w	r3, r3, #15
 8000a44:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a24      	ldr	r2, [pc, #144]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a4c:	89d1      	ldrh	r1, [r2, #14]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fca3 	bl	800239c <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe07 	bl	8000670 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a68:	8991      	ldrh	r1, [r2, #12]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fc95 	bl	800239c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a74:	8a1b      	ldrh	r3, [r3, #16]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdac 	bl	80005d4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a82:	8991      	ldrh	r1, [r2, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fc88 	bl	800239c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a8e:	8a1b      	ldrh	r3, [r3, #16]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd9f 	bl	80005d4 <DWT_Delay_us>

   LCD_DATA(Low4);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fde9 	bl	8000670 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aa4:	8991      	ldrh	r1, [r2, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fc77 	bl	800239c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <LCD_Write_Char+0xb0>)
 8000ab0:	8a1b      	ldrh	r3, [r3, #16]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd8e 	bl	80005d4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <LCD_Write_Char+0xb0>)
 8000abe:	8991      	ldrh	r1, [r2, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fc6a 	bl	800239c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aca:	8a1b      	ldrh	r3, [r3, #16]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd81 	bl	80005d4 <DWT_Delay_us>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08004d58 	.word	0x08004d58

08000ae0 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e009      	b.n	8000b02 <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff98 	bl	8000a2c <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1ef      	bne.n	8000aee <LCD_Write_String+0xe>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_ADC1_Init+0x9c>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_ADC1_Init+0xa0>)
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b7a:	f000 fe1f 	bl	80017bc <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b84:	f000 fab4 	bl	80010f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b9a:	f000 ff33 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ba4:	f000 faa4 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000090 	.word	0x20000090
 8000bb4:	40012000 	.word	0x40012000
 8000bb8:	0f000001 	.word	0x0f000001

08000bbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_ADC_MspInit+0x84>)
 8000c2a:	f001 fa1b 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012000 	.word	0x40012000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a38      	ldr	r2, [pc, #224]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a31      	ldr	r2, [pc, #196]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_GPIO_Init+0x100>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <MX_GPIO_Init+0x104>)
 8000cee:	f001 fb55 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MX_GPIO_Init+0x108>)
 8000cfa:	f001 fb4f 	bl	800239c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_GPIO_Init+0x104>)
 8000d18:	f001 f9a4 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8000d1c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000d20:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_GPIO_Init+0x108>)
 8000d36:	f001 f995 	bl	8002064 <HAL_GPIO_Init>

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(State == IDLE)
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10a      	bne.n	8000d76 <HAL_TIM_IC_CaptureCallback+0x26>
	{
		T1 = TIM1->CCR1;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d66:	6013      	str	r3, [r2, #0]
		OVC = 0;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
		State = BUSY;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
		Ticks = (T2 + (OVC * 65535)) - T1;
		Freq = (uint32_t)(F_CLK/Ticks);
		Feed_back_speed = Freq * 60 ; // Converting frequency to rpm
		State = IDLE;
	}
}
 8000d74:	e02a      	b.n	8000dcc <HAL_TIM_IC_CaptureCallback+0x7c>
	else if(State == BUSY)
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d126      	bne.n	8000dcc <HAL_TIM_IC_CaptureCallback+0x7c>
		T2 = TIM1->CCR1;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000d84:	6013      	str	r3, [r2, #0]
		Ticks = (T2 + (OVC * 65535)) - T1;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	1a9b      	subs	r3, r3, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	441a      	add	r2, r3
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000da2:	6013      	str	r3, [r2, #0]
		Freq = (uint32_t)(F_CLK/Ticks);
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000db2:	6013      	str	r3, [r2, #0]
		Feed_back_speed = Freq * 60 ; // Converting frequency to rpm
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]
		State = IDLE;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	200000e4 	.word	0x200000e4
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	200000e8 	.word	0x200000e8
 8000de4:	200000f4 	.word	0x200000f4
 8000de8:	200000ec 	.word	0x200000ec
 8000dec:	200000f0 	.word	0x200000f0
 8000df0:	20000000 	.word	0x20000000
 8000df4:	200000f8 	.word	0x200000f8
 8000df8:	200000fc 	.word	0x200000fc

08000dfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if ( htim == &htim1 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d105      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x1c>
		OVC++;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e16:	801a      	strh	r2, [r3, #0]

	if ( htim == &htim3 )// 1ms
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d129      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if ( one_minute_flag == 1)
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d117      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			if ( adc_raw_value_percentage > Feed_back_speed_percentage)
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d904      	bls.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x44>
				TIM2 -> CCR1 ++;
 8000e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3c:	3201      	adds	r2, #1
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
			if ( adc_raw_value_percentage < Feed_back_speed_percentage)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d204      	bcs.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x5c>
				TIM2 -> CCR1 --;
 8000e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e54:	3a01      	subs	r2, #1
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
		}

		one_minute_counter++;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e60:	6013      	str	r3, [r2, #0]
		if (one_minute_counter == 60000)// 1 minute has passed
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d102      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x78>
			one_minute_flag = 1;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
	}
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	2000012c 	.word	0x2000012c
 8000e84:	200000f4 	.word	0x200000f4
 8000e88:	200001bc 	.word	0x200001bc
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	200000e2 	.word	0x200000e2
 8000e94:	20000104 	.word	0x20000104
 8000e98:	200000d8 	.word	0x200000d8

08000e9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ea0:	f000 fbf6 	bl	8001690 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ea4:	f000 f8b8 	bl	8001018 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ea8:	f7ff fecc 	bl	8000c44 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000eac:	f000 f9d6 	bl	800125c <MX_TIM1_Init>
	MX_ADC1_Init();
 8000eb0:	f7ff fe32 	bl	8000b18 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000eb4:	f000 fa46 	bl	8001344 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000eb8:	f000 fab8 	bl	800142c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	//ADC start
	HAL_ADC_Start(&hadc1);
 8000ebc:	4845      	ldr	r0, [pc, #276]	; (8000fd4 <main+0x138>)
 8000ebe:	f000 fcc1 	bl	8001844 <HAL_ADC_Start>

	//PWM start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4844      	ldr	r0, [pc, #272]	; (8000fd8 <main+0x13c>)
 8000ec6:	f002 f833 	bl	8002f30 <HAL_TIM_PWM_Start>

	//Input Capture start
	HAL_TIM_Base_Start_IT(&htim1);
 8000eca:	4844      	ldr	r0, [pc, #272]	; (8000fdc <main+0x140>)
 8000ecc:	f001 ff66 	bl	8002d9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4842      	ldr	r0, [pc, #264]	; (8000fdc <main+0x140>)
 8000ed4:	f002 f94e 	bl	8003174 <HAL_TIM_IC_Start_IT>

	//LCD initialization
	LCD_Init();
 8000ed8:	f7ff fca6 	bl	8000828 <LCD_Init>
	LCD_Clear();
 8000edc:	f7ff fc5e 	bl	800079c <LCD_Clear>
	LCD_Set_Cursor(1, 1);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fc67 	bl	80007b6 <LCD_Set_Cursor>
	LCD_Write_String(" ");
 8000ee8:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <main+0x144>)
 8000eea:	f7ff fdf9 	bl	8000ae0 <LCD_Write_String>

	//1 minute timer start
	HAL_TIM_Base_Start_IT(&htim3);
 8000eee:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <main+0x148>)
 8000ef0:	f001 ff54 	bl	8002d9c <HAL_TIM_Base_Start_IT>

	//First step
	TIM2 -> CCR1 = 99;
 8000ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef8:	2263      	movs	r2, #99	; 0x63
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
	sprintf(Feed_back_speed_text,"%lud",Feed_back_speed);
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <main+0x14c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	493a      	ldr	r1, [pc, #232]	; (8000fec <main+0x150>)
 8000f04:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <main+0x154>)
 8000f06:	f003 faa5 	bl	8004454 <siprintf>
	LCD_Set_Cursor(1, 2);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fc52 	bl	80007b6 <LCD_Set_Cursor>
	LCD_Write_String(Feed_back_speed_text);
 8000f12:	4837      	ldr	r0, [pc, #220]	; (8000ff0 <main+0x154>)
 8000f14:	f7ff fde4 	bl	8000ae0 <LCD_Write_String>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8000f18:	482e      	ldr	r0, [pc, #184]	; (8000fd4 <main+0x138>)
 8000f1a:	f000 fd65 	bl	80019e8 <HAL_ADC_GetValue>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <main+0x158>)
 8000f24:	801a      	strh	r2, [r3, #0]

		LCD_Clear();
 8000f26:	f7ff fc39 	bl	800079c <LCD_Clear>

		Feed_back_speed_percentage = (Feed_back_speed / maximum_Feed_back_speed) * 100;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <main+0x14c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <main+0x15c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	2264      	movs	r2, #100	; 0x64
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <main+0x160>)
 8000f3e:	6013      	str	r3, [r2, #0]
		sprintf(Feed_back_speed_text,"%lud",Feed_back_speed);
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <main+0x14c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4929      	ldr	r1, [pc, #164]	; (8000fec <main+0x150>)
 8000f48:	4829      	ldr	r0, [pc, #164]	; (8000ff0 <main+0x154>)
 8000f4a:	f003 fa83 	bl	8004454 <siprintf>
		LCD_Set_Cursor(1, 2);
 8000f4e:	2102      	movs	r1, #2
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fc30 	bl	80007b6 <LCD_Set_Cursor>
		LCD_Write_String(Feed_back_speed_text);
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <main+0x154>)
 8000f58:	f7ff fdc2 	bl	8000ae0 <LCD_Write_String>


		if ( one_minute_flag == 0 )
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <main+0x164>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <main+0xd0>
		{
			maximum_Feed_back_speed = Feed_back_speed;
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <main+0x14c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <main+0x15c>)
 8000f6a:	6013      	str	r3, [r2, #0]
		}

		if ( one_minute_flag == 1 )
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <main+0x164>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d12b      	bne.n	8000fcc <main+0x130>
		{
			LCD_Clear();
 8000f74:	f7ff fc12 	bl	800079c <LCD_Clear>

			sprintf(Feed_back_speed_percentage_text,"%lud",Feed_back_speed_percentage);
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <main+0x160>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <main+0x150>)
 8000f80:	4820      	ldr	r0, [pc, #128]	; (8001004 <main+0x168>)
 8000f82:	f003 fa67 	bl	8004454 <siprintf>
			LCD_Set_Cursor(1, 10);
 8000f86:	210a      	movs	r1, #10
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fc14 	bl	80007b6 <LCD_Set_Cursor>
			LCD_Write_String(Feed_back_speed_percentage_text);
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <main+0x168>)
 8000f90:	f7ff fda6 	bl	8000ae0 <LCD_Write_String>

			sprintf(adc_raw_value_text,"%d",adc_raw_value);
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <main+0x158>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	491b      	ldr	r1, [pc, #108]	; (8001008 <main+0x16c>)
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <main+0x170>)
 8000f9e:	f003 fa59 	bl	8004454 <siprintf>
			LCD_Set_Cursor(2, 2);
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fc06 	bl	80007b6 <LCD_Set_Cursor>
			LCD_Write_String(adc_raw_value_text);
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <main+0x170>)
 8000fac:	f7ff fd98 	bl	8000ae0 <LCD_Write_String>
			sprintf(adc_raw_value_percentage_text,"%d",adc_raw_value_percentage);
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <main+0x174>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <main+0x16c>)
 8000fb8:	4816      	ldr	r0, [pc, #88]	; (8001014 <main+0x178>)
 8000fba:	f003 fa4b 	bl	8004454 <siprintf>
			LCD_Set_Cursor(2, 10);
 8000fbe:	210a      	movs	r1, #10
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fbf8 	bl	80007b6 <LCD_Set_Cursor>
			LCD_Write_String(adc_raw_value_percentage_text);
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <main+0x178>)
 8000fc8:	f7ff fd8a 	bl	8000ae0 <LCD_Write_String>
		}

		HAL_Delay(20);
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f000 fbd1 	bl	8001774 <HAL_Delay>
		adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8000fd2:	e7a1      	b.n	8000f18 <main+0x7c>
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	20000174 	.word	0x20000174
 8000fdc:	2000012c 	.word	0x2000012c
 8000fe0:	08004d48 	.word	0x08004d48
 8000fe4:	200001bc 	.word	0x200001bc
 8000fe8:	200000fc 	.word	0x200000fc
 8000fec:	08004d4c 	.word	0x08004d4c
 8000ff0:	20000108 	.word	0x20000108
 8000ff4:	200000e0 	.word	0x200000e0
 8000ff8:	20000100 	.word	0x20000100
 8000ffc:	20000104 	.word	0x20000104
 8001000:	200000dc 	.word	0x200000dc
 8001004:	20000118 	.word	0x20000118
 8001008:	08004d54 	.word	0x08004d54
 800100c:	20000110 	.word	0x20000110
 8001010:	200000e2 	.word	0x200000e2
 8001014:	20000120 	.word	0x20000120

08001018 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fa0c 	bl	8004444 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemClock_Config+0xd0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <SystemClock_Config+0xd0>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemClock_Config+0xd0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <SystemClock_Config+0xd4>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SystemClock_Config+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2301      	movs	r3, #1
 8001076:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800108c:	23a8      	movs	r3, #168	; 0xa8
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001094:	2304      	movs	r3, #4
 8001096:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f997 	bl	80023d0 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x94>
	{
		Error_Handler();
 80010a8:	f000 f822 	bl	80010f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2105      	movs	r1, #5
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fbf8 	bl	80028c0 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80010d6:	f000 f80b 	bl	80010f0 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80010da:	f001 fcd7 	bl	8002a8c <HAL_RCC_EnableCSS>
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_MspInit+0x4c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001150:	f001 fdba 	bl	8002cc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x8>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 faca 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM1_CC_IRQHandler+0x10>)
 80011aa:	f002 f90b 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000012c 	.word	0x2000012c

080011b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM3_IRQHandler+0x10>)
 80011be:	f002 f901 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001bc 	.word	0x200001bc

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f003 f8f8 	bl	80043f0 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20020000 	.word	0x20020000
 800122c:	00000400 	.word	0x00000400
 8001230:	20000128 	.word	0x20000128
 8001234:	20000218 	.word	0x20000218

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <MX_TIM1_Init+0xe0>)
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <MX_TIM1_Init+0xe4>)
 800128a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <MX_TIM1_Init+0xe0>)
 800128e:	22a7      	movs	r2, #167	; 0xa7
 8001290:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <MX_TIM1_Init+0xe0>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_TIM1_Init+0xe0>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_TIM1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_TIM1_Init+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_TIM1_Init+0xe0>)
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b2:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_TIM1_Init+0xe0>)
 80012b4:	f001 fd23 	bl	8002cfe <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80012be:	f7ff ff17 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4619      	mov	r1, r3
 80012ce:	481b      	ldr	r0, [pc, #108]	; (800133c <MX_TIM1_Init+0xe0>)
 80012d0:	f002 fade 	bl	8003890 <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012da:	f7ff ff09 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <MX_TIM1_Init+0xe0>)
 80012e0:	f001 feee 	bl	80030c0 <HAL_TIM_IC_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012ea:	f7ff ff01 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <MX_TIM1_Init+0xe0>)
 80012fe:	f002 ffe7 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001308:	f7ff fef2 	bl	80010f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_TIM1_Init+0xe0>)
 8001324:	f002 f956 	bl	80035d4 <HAL_TIM_IC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800132e:	f7ff fedf 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000012c 	.word	0x2000012c
 8001340:	40010000 	.word	0x40010000

08001344 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MX_TIM2_Init+0xe4>)
 8001376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <MX_TIM2_Init+0xe4>)
 800137e:	2253      	movs	r2, #83	; 0x53
 8001380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <MX_TIM2_Init+0xe4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MX_TIM2_Init+0xe4>)
 800138a:	2263      	movs	r2, #99	; 0x63
 800138c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MX_TIM2_Init+0xe4>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_TIM2_Init+0xe4>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139a:	4823      	ldr	r0, [pc, #140]	; (8001428 <MX_TIM2_Init+0xe4>)
 800139c:	f001 fcaf 	bl	8002cfe <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013a6:	f7ff fea3 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b4:	4619      	mov	r1, r3
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_TIM2_Init+0xe4>)
 80013b8:	f002 fa6a 	bl	8003890 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013c2:	f7ff fe95 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c6:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_TIM2_Init+0xe4>)
 80013c8:	f001 fd58 	bl	8002e7c <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013d2:	f7ff fe8d 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	4810      	ldr	r0, [pc, #64]	; (8001428 <MX_TIM2_Init+0xe4>)
 80013e6:	f002 ff73 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013f0:	f7ff fe7e 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM2_Init+0xe4>)
 800140c:	f002 f97e 	bl	800370c <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001416:	f7ff fe6b 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM2_Init+0xe4>)
 800141c:	f000 f8d6 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000174 	.word	0x20000174

0800142c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM3_Init+0x94>)
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <MX_TIM3_Init+0x98>)
 800144c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001450:	2253      	movs	r2, #83	; 0x53
 8001452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_TIM3_Init+0x94>)
 800145c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM3_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001470:	f001 fc45 	bl	8002cfe <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800147a:	f7ff fe39 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_TIM3_Init+0x94>)
 800148c:	f002 fa00 	bl	8003890 <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001496:	f7ff fe2b 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_TIM3_Init+0x94>)
 80014a8:	f002 ff12 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014b2:	f7ff fe1d 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001bc 	.word	0x200001bc
 80014c4:	40000400 	.word	0x40000400

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <HAL_TIM_Base_MspInit+0xf4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d135      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001534:	2301      	movs	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4821      	ldr	r0, [pc, #132]	; (80015c4 <HAL_TIM_Base_MspInit+0xfc>)
 8001540:	f000 fd90 	bl	8002064 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	201b      	movs	r0, #27
 800154a:	f000 fd54 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800154e:	201b      	movs	r0, #27
 8001550:	f000 fd6d 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001554:	e02e      	b.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155e:	d10e      	bne.n	800157e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
}
 800157c:	e01a      	b.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <HAL_TIM_Base_MspInit+0x100>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d115      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	201d      	movs	r0, #29
 80015aa:	f000 fd24 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ae:	201d      	movs	r0, #29
 80015b0:	f000 fd3d 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40010000 	.word	0x40010000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40000400 	.word	0x40000400

080015cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d11d      	bne.n	800162a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_TIM_MspPostInit+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_TIM_MspPostInit+0x68>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_TIM_MspPostInit+0x68>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160a:	2301      	movs	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <HAL_TIM_MspPostInit+0x6c>)
 8001626:	f000 fd1d 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001666:	f7ff fde7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f002 fec7 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fc15 	bl	8000e9c <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001680:	08004dc0 	.word	0x08004dc0
  ldr r2, =_sbss
 8001684:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001688:	20000218 	.word	0x20000218

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fc91 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fd1a 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fca9 	bl	800204a <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 fc71 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000004 	.word	0x20000004
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20000204 	.word	0x20000204

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000204 	.word	0x20000204

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c

080017bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e033      	b.n	800183a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff f9ee 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001802:	f023 0302 	bic.w	r3, r3, #2
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa1a 	bl	8001c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	e001      	b.n	8001830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_Start+0x1a>
 800185a:	2302      	movs	r3, #2
 800185c:	e0b2      	b.n	80019c4 <HAL_ADC_Start+0x180>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d018      	beq.n	80018a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001884:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <HAL_ADC_Start+0x18c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_ADC_Start+0x190>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9a      	lsrs	r2, r3, #18
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001898:	e002      	b.n	80018a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d17a      	bne.n	80019aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f2:	d106      	bne.n	8001902 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f023 0206 	bic.w	r2, r3, #6
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001900:	e002      	b.n	8001908 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_ADC_Start+0x194>)
 8001912:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800191c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2b00      	cmp	r3, #0
 8001928:	d12a      	bne.n	8001980 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <HAL_ADC_Start+0x198>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d015      	beq.n	8001960 <HAL_ADC_Start+0x11c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_ADC_Start+0x19c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d105      	bne.n	800194a <HAL_ADC_Start+0x106>
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_ADC_Start+0x194>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00a      	beq.n	8001960 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_ADC_Start+0x1a0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d136      	bne.n	80019c2 <HAL_ADC_Start+0x17e>
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_ADC_Start+0x194>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d130      	bne.n	80019c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d129      	bne.n	80019c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	e020      	b.n	80019c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <HAL_ADC_Start+0x198>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11b      	bne.n	80019c2 <HAL_ADC_Start+0x17e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d114      	bne.n	80019c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	e00b      	b.n	80019c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f043 0210 	orr.w	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000004 	.word	0x20000004
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	40012300 	.word	0x40012300
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40012100 	.word	0x40012100
 80019e4:	40012200 	.word	0x40012200

080019e8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e105      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x228>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b09      	cmp	r3, #9
 8001a2e:	d925      	bls.n	8001a7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68d9      	ldr	r1, [r3, #12]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	3b1e      	subs	r3, #30
 8001a46:	2207      	movs	r2, #7
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	400a      	ands	r2, r1
 8001a54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68d9      	ldr	r1, [r3, #12]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4403      	add	r3, r0
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	409a      	lsls	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	e022      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	2207      	movs	r2, #7
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4403      	add	r3, r0
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d824      	bhi.n	8001b14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b05      	subs	r3, #5
 8001adc:	221f      	movs	r2, #31
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b05      	subs	r3, #5
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
 8001b12:	e04c      	b.n	8001bae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d824      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b23      	subs	r3, #35	; 0x23
 8001b2e:	221f      	movs	r2, #31
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43da      	mvns	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b23      	subs	r3, #35	; 0x23
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
 8001b64:	e023      	b.n	8001bae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b41      	subs	r3, #65	; 0x41
 8001b78:	221f      	movs	r2, #31
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b41      	subs	r3, #65	; 0x41
 8001ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_ADC_ConfigChannel+0x234>)
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_ADC_ConfigChannel+0x238>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b12      	cmp	r3, #18
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_ADC_ConfigChannel+0x238>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d123      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x21e>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x1e6>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d11b      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d111      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_ADC_ConfigChannel+0x23c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_ADC_ConfigChannel+0x240>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9a      	lsrs	r2, r3, #18
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40012300 	.word	0x40012300
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	20000004 	.word	0x20000004
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <ADC_Init+0x1f0>)
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	021a      	lsls	r2, r3, #8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <ADC_Init+0x1f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e00f      	b.n	8001d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0202 	bic.w	r2, r2, #2
 8001d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e1b      	ldrb	r3, [r3, #24]
 8001d60:	005a      	lsls	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	035a      	lsls	r2, r3, #13
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	e007      	b.n	8001dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051a      	lsls	r2, r3, #20
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfe:	025a      	lsls	r2, r3, #9
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	029a      	lsls	r2, r3, #10
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	0f000001 	.word	0x0f000001

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff3e 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e16b      	b.n	8002358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 815a 	bne.w	8002352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80b4 	beq.w	8002352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b60      	ldr	r3, [pc, #384]	; (8002370 <HAL_GPIO_Init+0x30c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a5f      	ldr	r2, [pc, #380]	; (8002370 <HAL_GPIO_Init+0x30c>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_GPIO_Init+0x30c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_GPIO_Init+0x310>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x314>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_GPIO_Init+0x318>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_GPIO_Init+0x31c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x320>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x21a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_GPIO_Init+0x324>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x216>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_GPIO_Init+0x328>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x212>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x32c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x20e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x20a>
 800226a:	2307      	movs	r3, #7
 800226c:	e00e      	b.n	800228c <HAL_GPIO_Init+0x228>
 800226e:	2308      	movs	r3, #8
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002272:	2306      	movs	r3, #6
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x228>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x228>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x228>
 800228a:	2300      	movs	r3, #0
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x310>)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_GPIO_Init+0x334>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a32      	ldr	r2, [pc, #200]	; (8002398 <HAL_GPIO_Init+0x334>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_GPIO_Init+0x334>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_GPIO_Init+0x334>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_GPIO_Init+0x334>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x334>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_GPIO_Init+0x334>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_GPIO_Init+0x334>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	f67f ae90 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40013800 	.word	0x40013800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40021000 	.word	0x40021000
 800238c:	40021400 	.word	0x40021400
 8002390:	40021800 	.word	0x40021800
 8002394:	40021c00 	.word	0x40021c00
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e267      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d112      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e242      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff f968 	bl	800175c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f964 	bl	800175c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e207      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f954 	bl	800175c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f950 	bl	800175c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c7      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff f909 	bl	800175c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff f905 	bl	800175c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a8      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff f8e8 	bl	800175c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff f8e4 	bl	800175c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e187      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff f8c8 	bl	800175c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff f8c4 	bl	800175c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e167      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f8b1 	bl	800175c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff f8ad 	bl	800175c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e150      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b74      	ldr	r3, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff f86d 	bl	800175c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff f869 	bl	800175c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e10c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ea>
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x30c>
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5e      	ldr	r2, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b55      	ldr	r3, [pc, #340]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff f82e 	bl	800175c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff f82a 	bl	800175c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x334>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff f818 	bl	800175c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff f814 	bl	800175c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b5      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d05c      	beq.n	8002834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d141      	bne.n	8002806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe ffe8 	bl	800175c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe ffe4 	bl	800175c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e087      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	491b      	ldr	r1, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe ffbd 	bl	800175c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe ffb9 	bl	800175c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x416>
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe ffa6 	bl	800175c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ffa2 	bl	800175c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e045      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d028      	beq.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d121      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fed4 	bl	800175c <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fed0 	bl	800175c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f82d 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fe34 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08004d6c 	.word	0x08004d6c
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_EnableCSS+0x14>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	4247004c 	.word	0x4247004c

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b094      	sub	sp, #80	; 0x50
 8002aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	f200 80e1 	bhi.w	8002c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad6:	e0db      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002adc:	e0db      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_RCC_GetSysClockFreq+0x208>)
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae2:	e0d8      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aee:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b16:	4622      	mov	r2, r4
 8002b18:	462b      	mov	r3, r5
 8002b1a:	f04f 0000 	mov.w	r0, #0
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b28:	0150      	lsls	r0, r2, #5
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4621      	mov	r1, r4
 8002b30:	1a51      	subs	r1, r2, r1
 8002b32:	6139      	str	r1, [r7, #16]
 8002b34:	4629      	mov	r1, r5
 8002b36:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b48:	4659      	mov	r1, fp
 8002b4a:	018b      	lsls	r3, r1, #6
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b52:	4651      	mov	r1, sl
 8002b54:	018a      	lsls	r2, r1, #6
 8002b56:	4651      	mov	r1, sl
 8002b58:	ebb2 0801 	subs.w	r8, r2, r1
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	462b      	mov	r3, r5
 8002b84:	eb49 0303 	adc.w	r3, r9, r3
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b96:	4629      	mov	r1, r5
 8002b98:	024b      	lsls	r3, r1, #9
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	024a      	lsls	r2, r1, #9
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002baa:	2200      	movs	r2, #0
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bb4:	f7fd fb5c 	bl	8000270 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	e058      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	4611      	mov	r1, r2
 8002bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	0159      	lsls	r1, r3, #5
 8002bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bee:	0150      	lsls	r0, r2, #5
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c14:	ebb2 040a 	subs.w	r4, r2, sl
 8002c18:	eb63 050b 	sbc.w	r5, r3, fp
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	00eb      	lsls	r3, r5, #3
 8002c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2a:	00e2      	lsls	r2, r4, #3
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4643      	mov	r3, r8
 8002c32:	18e3      	adds	r3, r4, r3
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	464b      	mov	r3, r9
 8002c38:	eb45 0303 	adc.w	r3, r5, r3
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	028b      	lsls	r3, r1, #10
 8002c4e:	4621      	mov	r1, r4
 8002c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c54:	4621      	mov	r1, r4
 8002c56:	028a      	lsls	r2, r1, #10
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	61fa      	str	r2, [r7, #28]
 8002c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c68:	f7fd fb02 	bl	8000270 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3750      	adds	r7, #80	; 0x50
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	007a1200 	.word	0x007a1200

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d104      	bne.n	8002ce2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002cd8:	f000 f80a 	bl	8002cf0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_NMI_IRQHandler+0x24>)
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	701a      	strb	r2, [r3, #0]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	4002380e 	.word	0x4002380e

08002cf0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e041      	b.n	8002d94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fe fbcf 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 fe8d 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e04e      	b.n	8002e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d01d      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d010      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	e007      	b.n	8002e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40010400 	.word	0x40010400
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40001800 	.word	0x40001800

08002e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f839 	bl	8002f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fdce 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_PWM_Start+0x24>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e022      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d109      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x3e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e015      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d109      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x58>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e008      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07c      	b.n	800309c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x82>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb0:	e013      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x92>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	e00b      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd0:	e003      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 f94e 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <HAL_TIM_PWM_Start+0x174>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIM_PWM_Start+0xcc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <HAL_TIM_PWM_Start+0x178>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_PWM_Start+0xd0>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_TIM_PWM_Start+0xd2>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <HAL_TIM_PWM_Start+0x174>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d01d      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <HAL_TIM_PWM_Start+0x17c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_TIM_PWM_Start+0x180>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_TIM_PWM_Start+0x184>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_TIM_PWM_Start+0x178>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_TIM_PWM_Start+0x188>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIM_PWM_Start+0x136>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_TIM_PWM_Start+0x18c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d010      	beq.n	800309a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	e007      	b.n	800309a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40010400 	.word	0x40010400
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40014000 	.word	0x40014000
 80030bc:	40001800 	.word	0x40001800

080030c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e041      	b.n	8003156 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f839 	bl	800315e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f000 fcac 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_TIM_IC_Start_IT+0x1e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e013      	b.n	80031ba <HAL_TIM_IC_Start_IT+0x46>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_IC_Start_IT+0x2e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e00b      	b.n	80031ba <HAL_TIM_IC_Start_IT+0x46>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_IC_Start_IT+0x3e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e003      	b.n	80031ba <HAL_TIM_IC_Start_IT+0x46>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_TIM_IC_Start_IT+0x58>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e013      	b.n	80031f4 <HAL_TIM_IC_Start_IT+0x80>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d104      	bne.n	80031dc <HAL_TIM_IC_Start_IT+0x68>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e00b      	b.n	80031f4 <HAL_TIM_IC_Start_IT+0x80>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d104      	bne.n	80031ec <HAL_TIM_IC_Start_IT+0x78>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e003      	b.n	80031f4 <HAL_TIM_IC_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80031fc:	7b7b      	ldrb	r3, [r7, #13]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0cc      	b.n	80033a0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_TIM_IC_Start_IT+0xa2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	e013      	b.n	800323e <HAL_TIM_IC_Start_IT+0xca>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d104      	bne.n	8003226 <HAL_TIM_IC_Start_IT+0xb2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	e00b      	b.n	800323e <HAL_TIM_IC_Start_IT+0xca>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d104      	bne.n	8003236 <HAL_TIM_IC_Start_IT+0xc2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	e003      	b.n	800323e <HAL_TIM_IC_Start_IT+0xca>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_TIM_IC_Start_IT+0xda>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	e013      	b.n	8003276 <HAL_TIM_IC_Start_IT+0x102>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d104      	bne.n	800325e <HAL_TIM_IC_Start_IT+0xea>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800325c:	e00b      	b.n	8003276 <HAL_TIM_IC_Start_IT+0x102>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d104      	bne.n	800326e <HAL_TIM_IC_Start_IT+0xfa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	e003      	b.n	8003276 <HAL_TIM_IC_Start_IT+0x102>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d841      	bhi.n	8003300 <HAL_TIM_IC_Start_IT+0x18c>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_TIM_IC_Start_IT+0x110>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003301 	.word	0x08003301
 800328c:	08003301 	.word	0x08003301
 8003290:	08003301 	.word	0x08003301
 8003294:	080032cb 	.word	0x080032cb
 8003298:	08003301 	.word	0x08003301
 800329c:	08003301 	.word	0x08003301
 80032a0:	08003301 	.word	0x08003301
 80032a4:	080032dd 	.word	0x080032dd
 80032a8:	08003301 	.word	0x08003301
 80032ac:	08003301 	.word	0x08003301
 80032b0:	08003301 	.word	0x08003301
 80032b4:	080032ef 	.word	0x080032ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0202 	orr.w	r2, r2, #2
 80032c6:	60da      	str	r2, [r3, #12]
      break;
 80032c8:	e01d      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0204 	orr.w	r2, r2, #4
 80032d8:	60da      	str	r2, [r3, #12]
      break;
 80032da:	e014      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	60da      	str	r2, [r3, #12]
      break;
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0210 	orr.w	r2, r2, #16
 80032fc:	60da      	str	r2, [r3, #12]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	bf00      	nop
  }

  if (status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d148      	bne.n	800339e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 ffb5 	bl	8004284 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_TIM_IC_Start_IT+0x234>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d01d      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <HAL_TIM_IC_Start_IT+0x238>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_TIM_IC_Start_IT+0x23c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_TIM_IC_Start_IT+0x240>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_TIM_IC_Start_IT+0x244>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_TIM_IC_Start_IT+0x248>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_TIM_IC_Start_IT+0x1f6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIM_IC_Start_IT+0x24c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d111      	bne.n	800338e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d010      	beq.n	800339e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338c:	e007      	b.n	800339e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40001800 	.word	0x40001800

080033c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0202 	mvn.w	r2, #2
 80033f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fca2 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fb05 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb0c 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fc78 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fadb 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fae2 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fc4e 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fab1 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fab8 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fc24 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa87 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa8e 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0201 	mvn.w	r2, #1
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fc5a 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 ff34 	bl	80043dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa53 	bl	8003a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0220 	mvn.w	r2, #32
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fefe 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e088      	b.n	8003704 <HAL_TIM_IC_ConfigChannel+0x130>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f000 fc74 	bl	8003efc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020c 	bic.w	r2, r2, #12
 8003622:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	619a      	str	r2, [r3, #24]
 8003636:	e060      	b.n	80036fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d11c      	bne.n	8003678 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f000 fcf8 	bl	8004042 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003660:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6999      	ldr	r1, [r3, #24]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	619a      	str	r2, [r3, #24]
 8003676:	e040      	b.n	80036fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11b      	bne.n	80036b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f000 fd45 	bl	800411c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 020c 	bic.w	r2, r2, #12
 80036a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	61da      	str	r2, [r3, #28]
 80036b4:	e021      	b.n	80036fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d11c      	bne.n	80036f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f000 fd62 	bl	8004194 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69d9      	ldr	r1, [r3, #28]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	61da      	str	r2, [r3, #28]
 80036f4:	e001      	b.n	80036fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003726:	2302      	movs	r3, #2
 8003728:	e0ae      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	f200 809f 	bhi.w	8003878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003775 	.word	0x08003775
 8003744:	08003879 	.word	0x08003879
 8003748:	08003879 	.word	0x08003879
 800374c:	08003879 	.word	0x08003879
 8003750:	080037b5 	.word	0x080037b5
 8003754:	08003879 	.word	0x08003879
 8003758:	08003879 	.word	0x08003879
 800375c:	08003879 	.word	0x08003879
 8003760:	080037f7 	.word	0x080037f7
 8003764:	08003879 	.word	0x08003879
 8003768:	08003879 	.word	0x08003879
 800376c:	08003879 	.word	0x08003879
 8003770:	08003837 	.word	0x08003837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fa0e 	bl	8003b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e064      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fa5e 	bl	8003c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
      break;
 80037f4:	e043      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fab3 	bl	8003d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      break;
 8003834:	e023      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fb07 	bl	8003e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
      break;
 8003876:	e002      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_ConfigClockSource+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0b4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd4>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x172>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xa6>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b60      	cmp	r3, #96	; 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11a>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b50      	cmp	r3, #80	; 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfa>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13a>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f000 fc7d 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f000 fc66 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fb24 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	; 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fc33 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fb80 	bl	80040bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	; 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fc23 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fb04 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fc13 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fc0a 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a40      	ldr	r2, [pc, #256]	; (8003b70 <TIM_Base_SetConfig+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d00f      	beq.n	8003a9c <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a3d      	ldr	r2, [pc, #244]	; (8003b74 <TIM_Base_SetConfig+0x118>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a3c      	ldr	r2, [pc, #240]	; (8003b78 <TIM_Base_SetConfig+0x11c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <TIM_Base_SetConfig+0x120>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3a      	ldr	r2, [pc, #232]	; (8003b80 <TIM_Base_SetConfig+0x124>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d108      	bne.n	8003aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <TIM_Base_SetConfig+0x114>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02b      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d027      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <TIM_Base_SetConfig+0x118>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d023      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <TIM_Base_SetConfig+0x11c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01f      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <TIM_Base_SetConfig+0x120>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01b      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <TIM_Base_SetConfig+0x124>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d017      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <TIM_Base_SetConfig+0x128>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <TIM_Base_SetConfig+0x12c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <TIM_Base_SetConfig+0x130>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_Base_SetConfig+0x134>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <TIM_Base_SetConfig+0x138>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <TIM_Base_SetConfig+0x13c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <TIM_Base_SetConfig+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0xf8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <TIM_Base_SetConfig+0x124>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	615a      	str	r2, [r3, #20]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40010400 	.word	0x40010400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	40001800 	.word	0x40001800
 8003b94:	40001c00 	.word	0x40001c00
 8003b98:	40002000 	.word	0x40002000

08003b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <TIM_OC1_SetConfig+0xd8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC1_SetConfig+0x64>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <TIM_OC1_SetConfig+0xdc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10c      	bne.n	8003c1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0308 	bic.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <TIM_OC1_SetConfig+0xd8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_OC1_SetConfig+0x8e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <TIM_OC1_SetConfig+0xdc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d111      	bne.n	8003c4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400

08003c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0210 	bic.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0320 	bic.w	r3, r3, #32
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a22      	ldr	r2, [pc, #136]	; (8003d60 <TIM_OC2_SetConfig+0xe4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_OC2_SetConfig+0x68>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <TIM_OC2_SetConfig+0xe8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10d      	bne.n	8003d00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <TIM_OC2_SetConfig+0xe4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_OC2_SetConfig+0x94>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <TIM_OC2_SetConfig+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d113      	bne.n	8003d38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40010400 	.word	0x40010400

08003d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <TIM_OC3_SetConfig+0xe0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_OC3_SetConfig+0x66>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <TIM_OC3_SetConfig+0xe4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10d      	bne.n	8003dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC3_SetConfig+0xe0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC3_SetConfig+0x92>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <TIM_OC3_SetConfig+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d113      	bne.n	8003e22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <TIM_OC4_SetConfig+0xa4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC4_SetConfig+0x68>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <TIM_OC4_SetConfig+0xa8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d109      	bne.n	8003ecc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	019b      	lsls	r3, r3, #6
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40010400 	.word	0x40010400

08003efc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <TIM_TI1_SetConfig+0xcc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01b      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d017      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <TIM_TI1_SetConfig+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <TIM_TI1_SetConfig+0xd4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <TIM_TI1_SetConfig+0xd8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <TIM_TI1_SetConfig+0xdc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <TIM_TI1_SetConfig+0xe0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_TI1_SetConfig+0x66>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <TIM_TI1_SetConfig+0xe4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <TIM_TI1_SetConfig+0x6a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <TIM_TI1_SetConfig+0x6c>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e003      	b.n	8003f86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f023 030a 	bic.w	r3, r3, #10
 8003fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 030a 	and.w	r3, r3, #10
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40001800 	.word	0x40001800

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	b29b      	uxth	r3, r3
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004094:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	031b      	lsls	r3, r3, #12
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 0303 	bic.w	r3, r3, #3
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004158:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800416c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	031b      	lsls	r3, r3, #12
 80041d8:	b29b      	uxth	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	031b      	lsls	r3, r3, #12
 80041ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e05a      	b.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a21      	ldr	r2, [pc, #132]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d01d      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40001800 	.word	0x40001800

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <__errno>:
 80043f0:	4b01      	ldr	r3, [pc, #4]	; (80043f8 <__errno+0x8>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000010 	.word	0x20000010

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	; (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	; (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	; (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x44>)
 8004410:	f000 fc8e 	bl	8004d30 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	08004db8 	.word	0x08004db8
 8004438:	08004db8 	.word	0x08004db8
 800443c:	08004db8 	.word	0x08004db8
 8004440:	08004dbc 	.word	0x08004dbc

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <siprintf>:
 8004454:	b40e      	push	{r1, r2, r3}
 8004456:	b500      	push	{lr}
 8004458:	b09c      	sub	sp, #112	; 0x70
 800445a:	ab1d      	add	r3, sp, #116	; 0x74
 800445c:	9002      	str	r0, [sp, #8]
 800445e:	9006      	str	r0, [sp, #24]
 8004460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <siprintf+0x38>)
 8004466:	9107      	str	r1, [sp, #28]
 8004468:	9104      	str	r1, [sp, #16]
 800446a:	4909      	ldr	r1, [pc, #36]	; (8004490 <siprintf+0x3c>)
 800446c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004470:	9105      	str	r1, [sp, #20]
 8004472:	6800      	ldr	r0, [r0, #0]
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	a902      	add	r1, sp, #8
 8004478:	f000 f868 	bl	800454c <_svfiprintf_r>
 800447c:	9b02      	ldr	r3, [sp, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	b01c      	add	sp, #112	; 0x70
 8004484:	f85d eb04 	ldr.w	lr, [sp], #4
 8004488:	b003      	add	sp, #12
 800448a:	4770      	bx	lr
 800448c:	20000010 	.word	0x20000010
 8004490:	ffff0208 	.word	0xffff0208

08004494 <__ssputs_r>:
 8004494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	688e      	ldr	r6, [r1, #8]
 800449a:	429e      	cmp	r6, r3
 800449c:	4682      	mov	sl, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4690      	mov	r8, r2
 80044a2:	461f      	mov	r7, r3
 80044a4:	d838      	bhi.n	8004518 <__ssputs_r+0x84>
 80044a6:	898a      	ldrh	r2, [r1, #12]
 80044a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ac:	d032      	beq.n	8004514 <__ssputs_r+0x80>
 80044ae:	6825      	ldr	r5, [r4, #0]
 80044b0:	6909      	ldr	r1, [r1, #16]
 80044b2:	eba5 0901 	sub.w	r9, r5, r1
 80044b6:	6965      	ldr	r5, [r4, #20]
 80044b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c0:	3301      	adds	r3, #1
 80044c2:	444b      	add	r3, r9
 80044c4:	106d      	asrs	r5, r5, #1
 80044c6:	429d      	cmp	r5, r3
 80044c8:	bf38      	it	cc
 80044ca:	461d      	movcc	r5, r3
 80044cc:	0553      	lsls	r3, r2, #21
 80044ce:	d531      	bpl.n	8004534 <__ssputs_r+0xa0>
 80044d0:	4629      	mov	r1, r5
 80044d2:	f000 fb63 	bl	8004b9c <_malloc_r>
 80044d6:	4606      	mov	r6, r0
 80044d8:	b950      	cbnz	r0, 80044f0 <__ssputs_r+0x5c>
 80044da:	230c      	movs	r3, #12
 80044dc:	f8ca 3000 	str.w	r3, [sl]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	6921      	ldr	r1, [r4, #16]
 80044f2:	464a      	mov	r2, r9
 80044f4:	f000 fabe 	bl	8004a74 <memcpy>
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	6126      	str	r6, [r4, #16]
 8004506:	6165      	str	r5, [r4, #20]
 8004508:	444e      	add	r6, r9
 800450a:	eba5 0509 	sub.w	r5, r5, r9
 800450e:	6026      	str	r6, [r4, #0]
 8004510:	60a5      	str	r5, [r4, #8]
 8004512:	463e      	mov	r6, r7
 8004514:	42be      	cmp	r6, r7
 8004516:	d900      	bls.n	800451a <__ssputs_r+0x86>
 8004518:	463e      	mov	r6, r7
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	4632      	mov	r2, r6
 800451e:	4641      	mov	r1, r8
 8004520:	f000 fab6 	bl	8004a90 <memmove>
 8004524:	68a3      	ldr	r3, [r4, #8]
 8004526:	1b9b      	subs	r3, r3, r6
 8004528:	60a3      	str	r3, [r4, #8]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4433      	add	r3, r6
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	2000      	movs	r0, #0
 8004532:	e7db      	b.n	80044ec <__ssputs_r+0x58>
 8004534:	462a      	mov	r2, r5
 8004536:	f000 fba5 	bl	8004c84 <_realloc_r>
 800453a:	4606      	mov	r6, r0
 800453c:	2800      	cmp	r0, #0
 800453e:	d1e1      	bne.n	8004504 <__ssputs_r+0x70>
 8004540:	6921      	ldr	r1, [r4, #16]
 8004542:	4650      	mov	r0, sl
 8004544:	f000 fabe 	bl	8004ac4 <_free_r>
 8004548:	e7c7      	b.n	80044da <__ssputs_r+0x46>
	...

0800454c <_svfiprintf_r>:
 800454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004550:	4698      	mov	r8, r3
 8004552:	898b      	ldrh	r3, [r1, #12]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	b09d      	sub	sp, #116	; 0x74
 8004558:	4607      	mov	r7, r0
 800455a:	460d      	mov	r5, r1
 800455c:	4614      	mov	r4, r2
 800455e:	d50e      	bpl.n	800457e <_svfiprintf_r+0x32>
 8004560:	690b      	ldr	r3, [r1, #16]
 8004562:	b963      	cbnz	r3, 800457e <_svfiprintf_r+0x32>
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	f000 fb19 	bl	8004b9c <_malloc_r>
 800456a:	6028      	str	r0, [r5, #0]
 800456c:	6128      	str	r0, [r5, #16]
 800456e:	b920      	cbnz	r0, 800457a <_svfiprintf_r+0x2e>
 8004570:	230c      	movs	r3, #12
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e0d1      	b.n	800471e <_svfiprintf_r+0x1d2>
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	616b      	str	r3, [r5, #20]
 800457e:	2300      	movs	r3, #0
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	2320      	movs	r3, #32
 8004584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004588:	f8cd 800c 	str.w	r8, [sp, #12]
 800458c:	2330      	movs	r3, #48	; 0x30
 800458e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004738 <_svfiprintf_r+0x1ec>
 8004592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004596:	f04f 0901 	mov.w	r9, #1
 800459a:	4623      	mov	r3, r4
 800459c:	469a      	mov	sl, r3
 800459e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a2:	b10a      	cbz	r2, 80045a8 <_svfiprintf_r+0x5c>
 80045a4:	2a25      	cmp	r2, #37	; 0x25
 80045a6:	d1f9      	bne.n	800459c <_svfiprintf_r+0x50>
 80045a8:	ebba 0b04 	subs.w	fp, sl, r4
 80045ac:	d00b      	beq.n	80045c6 <_svfiprintf_r+0x7a>
 80045ae:	465b      	mov	r3, fp
 80045b0:	4622      	mov	r2, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff ff6d 	bl	8004494 <__ssputs_r>
 80045ba:	3001      	adds	r0, #1
 80045bc:	f000 80aa 	beq.w	8004714 <_svfiprintf_r+0x1c8>
 80045c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045c2:	445a      	add	r2, fp
 80045c4:	9209      	str	r2, [sp, #36]	; 0x24
 80045c6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a2 	beq.w	8004714 <_svfiprintf_r+0x1c8>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045da:	f10a 0a01 	add.w	sl, sl, #1
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e6:	931a      	str	r3, [sp, #104]	; 0x68
 80045e8:	4654      	mov	r4, sl
 80045ea:	2205      	movs	r2, #5
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	4851      	ldr	r0, [pc, #324]	; (8004738 <_svfiprintf_r+0x1ec>)
 80045f2:	f7fb fded 	bl	80001d0 <memchr>
 80045f6:	9a04      	ldr	r2, [sp, #16]
 80045f8:	b9d8      	cbnz	r0, 8004632 <_svfiprintf_r+0xe6>
 80045fa:	06d0      	lsls	r0, r2, #27
 80045fc:	bf44      	itt	mi
 80045fe:	2320      	movmi	r3, #32
 8004600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004604:	0711      	lsls	r1, r2, #28
 8004606:	bf44      	itt	mi
 8004608:	232b      	movmi	r3, #43	; 0x2b
 800460a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800460e:	f89a 3000 	ldrb.w	r3, [sl]
 8004612:	2b2a      	cmp	r3, #42	; 0x2a
 8004614:	d015      	beq.n	8004642 <_svfiprintf_r+0xf6>
 8004616:	9a07      	ldr	r2, [sp, #28]
 8004618:	4654      	mov	r4, sl
 800461a:	2000      	movs	r0, #0
 800461c:	f04f 0c0a 	mov.w	ip, #10
 8004620:	4621      	mov	r1, r4
 8004622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004626:	3b30      	subs	r3, #48	; 0x30
 8004628:	2b09      	cmp	r3, #9
 800462a:	d94e      	bls.n	80046ca <_svfiprintf_r+0x17e>
 800462c:	b1b0      	cbz	r0, 800465c <_svfiprintf_r+0x110>
 800462e:	9207      	str	r2, [sp, #28]
 8004630:	e014      	b.n	800465c <_svfiprintf_r+0x110>
 8004632:	eba0 0308 	sub.w	r3, r0, r8
 8004636:	fa09 f303 	lsl.w	r3, r9, r3
 800463a:	4313      	orrs	r3, r2
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	46a2      	mov	sl, r4
 8004640:	e7d2      	b.n	80045e8 <_svfiprintf_r+0x9c>
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	9103      	str	r1, [sp, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfbb      	ittet	lt
 800464e:	425b      	neglt	r3, r3
 8004650:	f042 0202 	orrlt.w	r2, r2, #2
 8004654:	9307      	strge	r3, [sp, #28]
 8004656:	9307      	strlt	r3, [sp, #28]
 8004658:	bfb8      	it	lt
 800465a:	9204      	strlt	r2, [sp, #16]
 800465c:	7823      	ldrb	r3, [r4, #0]
 800465e:	2b2e      	cmp	r3, #46	; 0x2e
 8004660:	d10c      	bne.n	800467c <_svfiprintf_r+0x130>
 8004662:	7863      	ldrb	r3, [r4, #1]
 8004664:	2b2a      	cmp	r3, #42	; 0x2a
 8004666:	d135      	bne.n	80046d4 <_svfiprintf_r+0x188>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	1d1a      	adds	r2, r3, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	9203      	str	r2, [sp, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	bfb8      	it	lt
 8004674:	f04f 33ff 	movlt.w	r3, #4294967295
 8004678:	3402      	adds	r4, #2
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004748 <_svfiprintf_r+0x1fc>
 8004680:	7821      	ldrb	r1, [r4, #0]
 8004682:	2203      	movs	r2, #3
 8004684:	4650      	mov	r0, sl
 8004686:	f7fb fda3 	bl	80001d0 <memchr>
 800468a:	b140      	cbz	r0, 800469e <_svfiprintf_r+0x152>
 800468c:	2340      	movs	r3, #64	; 0x40
 800468e:	eba0 000a 	sub.w	r0, r0, sl
 8004692:	fa03 f000 	lsl.w	r0, r3, r0
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	4303      	orrs	r3, r0
 800469a:	3401      	adds	r4, #1
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a2:	4826      	ldr	r0, [pc, #152]	; (800473c <_svfiprintf_r+0x1f0>)
 80046a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046a8:	2206      	movs	r2, #6
 80046aa:	f7fb fd91 	bl	80001d0 <memchr>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d038      	beq.n	8004724 <_svfiprintf_r+0x1d8>
 80046b2:	4b23      	ldr	r3, [pc, #140]	; (8004740 <_svfiprintf_r+0x1f4>)
 80046b4:	bb1b      	cbnz	r3, 80046fe <_svfiprintf_r+0x1b2>
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	3307      	adds	r3, #7
 80046ba:	f023 0307 	bic.w	r3, r3, #7
 80046be:	3308      	adds	r3, #8
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c4:	4433      	add	r3, r6
 80046c6:	9309      	str	r3, [sp, #36]	; 0x24
 80046c8:	e767      	b.n	800459a <_svfiprintf_r+0x4e>
 80046ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ce:	460c      	mov	r4, r1
 80046d0:	2001      	movs	r0, #1
 80046d2:	e7a5      	b.n	8004620 <_svfiprintf_r+0xd4>
 80046d4:	2300      	movs	r3, #0
 80046d6:	3401      	adds	r4, #1
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	4619      	mov	r1, r3
 80046dc:	f04f 0c0a 	mov.w	ip, #10
 80046e0:	4620      	mov	r0, r4
 80046e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e6:	3a30      	subs	r2, #48	; 0x30
 80046e8:	2a09      	cmp	r2, #9
 80046ea:	d903      	bls.n	80046f4 <_svfiprintf_r+0x1a8>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0c5      	beq.n	800467c <_svfiprintf_r+0x130>
 80046f0:	9105      	str	r1, [sp, #20]
 80046f2:	e7c3      	b.n	800467c <_svfiprintf_r+0x130>
 80046f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f8:	4604      	mov	r4, r0
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7f0      	b.n	80046e0 <_svfiprintf_r+0x194>
 80046fe:	ab03      	add	r3, sp, #12
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	462a      	mov	r2, r5
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <_svfiprintf_r+0x1f8>)
 8004706:	a904      	add	r1, sp, #16
 8004708:	4638      	mov	r0, r7
 800470a:	f3af 8000 	nop.w
 800470e:	1c42      	adds	r2, r0, #1
 8004710:	4606      	mov	r6, r0
 8004712:	d1d6      	bne.n	80046c2 <_svfiprintf_r+0x176>
 8004714:	89ab      	ldrh	r3, [r5, #12]
 8004716:	065b      	lsls	r3, r3, #25
 8004718:	f53f af2c 	bmi.w	8004574 <_svfiprintf_r+0x28>
 800471c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800471e:	b01d      	add	sp, #116	; 0x74
 8004720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004724:	ab03      	add	r3, sp, #12
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	462a      	mov	r2, r5
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <_svfiprintf_r+0x1f8>)
 800472c:	a904      	add	r1, sp, #16
 800472e:	4638      	mov	r0, r7
 8004730:	f000 f87a 	bl	8004828 <_printf_i>
 8004734:	e7eb      	b.n	800470e <_svfiprintf_r+0x1c2>
 8004736:	bf00      	nop
 8004738:	08004d7c 	.word	0x08004d7c
 800473c:	08004d86 	.word	0x08004d86
 8004740:	00000000 	.word	0x00000000
 8004744:	08004495 	.word	0x08004495
 8004748:	08004d82 	.word	0x08004d82

0800474c <_printf_common>:
 800474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	4616      	mov	r6, r2
 8004752:	4699      	mov	r9, r3
 8004754:	688a      	ldr	r2, [r1, #8]
 8004756:	690b      	ldr	r3, [r1, #16]
 8004758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800475c:	4293      	cmp	r3, r2
 800475e:	bfb8      	it	lt
 8004760:	4613      	movlt	r3, r2
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004768:	4607      	mov	r7, r0
 800476a:	460c      	mov	r4, r1
 800476c:	b10a      	cbz	r2, 8004772 <_printf_common+0x26>
 800476e:	3301      	adds	r3, #1
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	0699      	lsls	r1, r3, #26
 8004776:	bf42      	ittt	mi
 8004778:	6833      	ldrmi	r3, [r6, #0]
 800477a:	3302      	addmi	r3, #2
 800477c:	6033      	strmi	r3, [r6, #0]
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	f015 0506 	ands.w	r5, r5, #6
 8004784:	d106      	bne.n	8004794 <_printf_common+0x48>
 8004786:	f104 0a19 	add.w	sl, r4, #25
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	6832      	ldr	r2, [r6, #0]
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	42ab      	cmp	r3, r5
 8004792:	dc26      	bgt.n	80047e2 <_printf_common+0x96>
 8004794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004798:	1e13      	subs	r3, r2, #0
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	bf18      	it	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	0692      	lsls	r2, r2, #26
 80047a2:	d42b      	bmi.n	80047fc <_printf_common+0xb0>
 80047a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047a8:	4649      	mov	r1, r9
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c0      	blx	r8
 80047ae:	3001      	adds	r0, #1
 80047b0:	d01e      	beq.n	80047f0 <_printf_common+0xa4>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	68e5      	ldr	r5, [r4, #12]
 80047b6:	6832      	ldr	r2, [r6, #0]
 80047b8:	f003 0306 	and.w	r3, r3, #6
 80047bc:	2b04      	cmp	r3, #4
 80047be:	bf08      	it	eq
 80047c0:	1aad      	subeq	r5, r5, r2
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	6922      	ldr	r2, [r4, #16]
 80047c6:	bf0c      	ite	eq
 80047c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047cc:	2500      	movne	r5, #0
 80047ce:	4293      	cmp	r3, r2
 80047d0:	bfc4      	itt	gt
 80047d2:	1a9b      	subgt	r3, r3, r2
 80047d4:	18ed      	addgt	r5, r5, r3
 80047d6:	2600      	movs	r6, #0
 80047d8:	341a      	adds	r4, #26
 80047da:	42b5      	cmp	r5, r6
 80047dc:	d11a      	bne.n	8004814 <_printf_common+0xc8>
 80047de:	2000      	movs	r0, #0
 80047e0:	e008      	b.n	80047f4 <_printf_common+0xa8>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4652      	mov	r2, sl
 80047e6:	4649      	mov	r1, r9
 80047e8:	4638      	mov	r0, r7
 80047ea:	47c0      	blx	r8
 80047ec:	3001      	adds	r0, #1
 80047ee:	d103      	bne.n	80047f8 <_printf_common+0xac>
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	3501      	adds	r5, #1
 80047fa:	e7c6      	b.n	800478a <_printf_common+0x3e>
 80047fc:	18e1      	adds	r1, r4, r3
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	2030      	movs	r0, #48	; 0x30
 8004802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004806:	4422      	add	r2, r4
 8004808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800480c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004810:	3302      	adds	r3, #2
 8004812:	e7c7      	b.n	80047a4 <_printf_common+0x58>
 8004814:	2301      	movs	r3, #1
 8004816:	4622      	mov	r2, r4
 8004818:	4649      	mov	r1, r9
 800481a:	4638      	mov	r0, r7
 800481c:	47c0      	blx	r8
 800481e:	3001      	adds	r0, #1
 8004820:	d0e6      	beq.n	80047f0 <_printf_common+0xa4>
 8004822:	3601      	adds	r6, #1
 8004824:	e7d9      	b.n	80047da <_printf_common+0x8e>
	...

08004828 <_printf_i>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	7e0f      	ldrb	r7, [r1, #24]
 800482e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004830:	2f78      	cmp	r7, #120	; 0x78
 8004832:	4691      	mov	r9, r2
 8004834:	4680      	mov	r8, r0
 8004836:	460c      	mov	r4, r1
 8004838:	469a      	mov	sl, r3
 800483a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800483e:	d807      	bhi.n	8004850 <_printf_i+0x28>
 8004840:	2f62      	cmp	r7, #98	; 0x62
 8004842:	d80a      	bhi.n	800485a <_printf_i+0x32>
 8004844:	2f00      	cmp	r7, #0
 8004846:	f000 80d8 	beq.w	80049fa <_printf_i+0x1d2>
 800484a:	2f58      	cmp	r7, #88	; 0x58
 800484c:	f000 80a3 	beq.w	8004996 <_printf_i+0x16e>
 8004850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004858:	e03a      	b.n	80048d0 <_printf_i+0xa8>
 800485a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800485e:	2b15      	cmp	r3, #21
 8004860:	d8f6      	bhi.n	8004850 <_printf_i+0x28>
 8004862:	a101      	add	r1, pc, #4	; (adr r1, 8004868 <_printf_i+0x40>)
 8004864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048d5 	.word	0x080048d5
 8004870:	08004851 	.word	0x08004851
 8004874:	08004851 	.word	0x08004851
 8004878:	08004851 	.word	0x08004851
 800487c:	08004851 	.word	0x08004851
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004851 	.word	0x08004851
 8004888:	08004851 	.word	0x08004851
 800488c:	08004851 	.word	0x08004851
 8004890:	08004851 	.word	0x08004851
 8004894:	080049e1 	.word	0x080049e1
 8004898:	08004905 	.word	0x08004905
 800489c:	080049c3 	.word	0x080049c3
 80048a0:	08004851 	.word	0x08004851
 80048a4:	08004851 	.word	0x08004851
 80048a8:	08004a03 	.word	0x08004a03
 80048ac:	08004851 	.word	0x08004851
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004851 	.word	0x08004851
 80048b8:	08004851 	.word	0x08004851
 80048bc:	080049cb 	.word	0x080049cb
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	602a      	str	r2, [r5, #0]
 80048c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0a3      	b.n	8004a1c <_printf_i+0x1f4>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	6829      	ldr	r1, [r5, #0]
 80048d8:	0606      	lsls	r6, r0, #24
 80048da:	f101 0304 	add.w	r3, r1, #4
 80048de:	d50a      	bpl.n	80048f6 <_printf_i+0xce>
 80048e0:	680e      	ldr	r6, [r1, #0]
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	da03      	bge.n	80048f0 <_printf_i+0xc8>
 80048e8:	232d      	movs	r3, #45	; 0x2d
 80048ea:	4276      	negs	r6, r6
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f0:	485e      	ldr	r0, [pc, #376]	; (8004a6c <_printf_i+0x244>)
 80048f2:	230a      	movs	r3, #10
 80048f4:	e019      	b.n	800492a <_printf_i+0x102>
 80048f6:	680e      	ldr	r6, [r1, #0]
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048fe:	bf18      	it	ne
 8004900:	b236      	sxthne	r6, r6
 8004902:	e7ef      	b.n	80048e4 <_printf_i+0xbc>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	1d19      	adds	r1, r3, #4
 800490a:	6029      	str	r1, [r5, #0]
 800490c:	0601      	lsls	r1, r0, #24
 800490e:	d501      	bpl.n	8004914 <_printf_i+0xec>
 8004910:	681e      	ldr	r6, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0xf2>
 8004914:	0646      	lsls	r6, r0, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0xe8>
 8004918:	881e      	ldrh	r6, [r3, #0]
 800491a:	4854      	ldr	r0, [pc, #336]	; (8004a6c <_printf_i+0x244>)
 800491c:	2f6f      	cmp	r7, #111	; 0x6f
 800491e:	bf0c      	ite	eq
 8004920:	2308      	moveq	r3, #8
 8004922:	230a      	movne	r3, #10
 8004924:	2100      	movs	r1, #0
 8004926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800492a:	6865      	ldr	r5, [r4, #4]
 800492c:	60a5      	str	r5, [r4, #8]
 800492e:	2d00      	cmp	r5, #0
 8004930:	bfa2      	ittt	ge
 8004932:	6821      	ldrge	r1, [r4, #0]
 8004934:	f021 0104 	bicge.w	r1, r1, #4
 8004938:	6021      	strge	r1, [r4, #0]
 800493a:	b90e      	cbnz	r6, 8004940 <_printf_i+0x118>
 800493c:	2d00      	cmp	r5, #0
 800493e:	d04d      	beq.n	80049dc <_printf_i+0x1b4>
 8004940:	4615      	mov	r5, r2
 8004942:	fbb6 f1f3 	udiv	r1, r6, r3
 8004946:	fb03 6711 	mls	r7, r3, r1, r6
 800494a:	5dc7      	ldrb	r7, [r0, r7]
 800494c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004950:	4637      	mov	r7, r6
 8004952:	42bb      	cmp	r3, r7
 8004954:	460e      	mov	r6, r1
 8004956:	d9f4      	bls.n	8004942 <_printf_i+0x11a>
 8004958:	2b08      	cmp	r3, #8
 800495a:	d10b      	bne.n	8004974 <_printf_i+0x14c>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	07de      	lsls	r6, r3, #31
 8004960:	d508      	bpl.n	8004974 <_printf_i+0x14c>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	6861      	ldr	r1, [r4, #4]
 8004966:	4299      	cmp	r1, r3
 8004968:	bfde      	ittt	le
 800496a:	2330      	movle	r3, #48	; 0x30
 800496c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004974:	1b52      	subs	r2, r2, r5
 8004976:	6122      	str	r2, [r4, #16]
 8004978:	f8cd a000 	str.w	sl, [sp]
 800497c:	464b      	mov	r3, r9
 800497e:	aa03      	add	r2, sp, #12
 8004980:	4621      	mov	r1, r4
 8004982:	4640      	mov	r0, r8
 8004984:	f7ff fee2 	bl	800474c <_printf_common>
 8004988:	3001      	adds	r0, #1
 800498a:	d14c      	bne.n	8004a26 <_printf_i+0x1fe>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	b004      	add	sp, #16
 8004992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004996:	4835      	ldr	r0, [pc, #212]	; (8004a6c <_printf_i+0x244>)
 8004998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800499c:	6829      	ldr	r1, [r5, #0]
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049a4:	6029      	str	r1, [r5, #0]
 80049a6:	061d      	lsls	r5, r3, #24
 80049a8:	d514      	bpl.n	80049d4 <_printf_i+0x1ac>
 80049aa:	07df      	lsls	r7, r3, #31
 80049ac:	bf44      	itt	mi
 80049ae:	f043 0320 	orrmi.w	r3, r3, #32
 80049b2:	6023      	strmi	r3, [r4, #0]
 80049b4:	b91e      	cbnz	r6, 80049be <_printf_i+0x196>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f023 0320 	bic.w	r3, r3, #32
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	2310      	movs	r3, #16
 80049c0:	e7b0      	b.n	8004924 <_printf_i+0xfc>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	f043 0320 	orr.w	r3, r3, #32
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	2378      	movs	r3, #120	; 0x78
 80049cc:	4828      	ldr	r0, [pc, #160]	; (8004a70 <_printf_i+0x248>)
 80049ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d2:	e7e3      	b.n	800499c <_printf_i+0x174>
 80049d4:	0659      	lsls	r1, r3, #25
 80049d6:	bf48      	it	mi
 80049d8:	b2b6      	uxthmi	r6, r6
 80049da:	e7e6      	b.n	80049aa <_printf_i+0x182>
 80049dc:	4615      	mov	r5, r2
 80049de:	e7bb      	b.n	8004958 <_printf_i+0x130>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	6826      	ldr	r6, [r4, #0]
 80049e4:	6961      	ldr	r1, [r4, #20]
 80049e6:	1d18      	adds	r0, r3, #4
 80049e8:	6028      	str	r0, [r5, #0]
 80049ea:	0635      	lsls	r5, r6, #24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	d501      	bpl.n	80049f4 <_printf_i+0x1cc>
 80049f0:	6019      	str	r1, [r3, #0]
 80049f2:	e002      	b.n	80049fa <_printf_i+0x1d2>
 80049f4:	0670      	lsls	r0, r6, #25
 80049f6:	d5fb      	bpl.n	80049f0 <_printf_i+0x1c8>
 80049f8:	8019      	strh	r1, [r3, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	4615      	mov	r5, r2
 8004a00:	e7ba      	b.n	8004978 <_printf_i+0x150>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	602a      	str	r2, [r5, #0]
 8004a08:	681d      	ldr	r5, [r3, #0]
 8004a0a:	6862      	ldr	r2, [r4, #4]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f7fb fbde 	bl	80001d0 <memchr>
 8004a14:	b108      	cbz	r0, 8004a1a <_printf_i+0x1f2>
 8004a16:	1b40      	subs	r0, r0, r5
 8004a18:	6060      	str	r0, [r4, #4]
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a24:	e7a8      	b.n	8004978 <_printf_i+0x150>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	47d0      	blx	sl
 8004a30:	3001      	adds	r0, #1
 8004a32:	d0ab      	beq.n	800498c <_printf_i+0x164>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	079b      	lsls	r3, r3, #30
 8004a38:	d413      	bmi.n	8004a62 <_printf_i+0x23a>
 8004a3a:	68e0      	ldr	r0, [r4, #12]
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	bfb8      	it	lt
 8004a42:	4618      	movlt	r0, r3
 8004a44:	e7a4      	b.n	8004990 <_printf_i+0x168>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	47d0      	blx	sl
 8004a50:	3001      	adds	r0, #1
 8004a52:	d09b      	beq.n	800498c <_printf_i+0x164>
 8004a54:	3501      	adds	r5, #1
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	9903      	ldr	r1, [sp, #12]
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dcf2      	bgt.n	8004a46 <_printf_i+0x21e>
 8004a60:	e7eb      	b.n	8004a3a <_printf_i+0x212>
 8004a62:	2500      	movs	r5, #0
 8004a64:	f104 0619 	add.w	r6, r4, #25
 8004a68:	e7f5      	b.n	8004a56 <_printf_i+0x22e>
 8004a6a:	bf00      	nop
 8004a6c:	08004d8d 	.word	0x08004d8d
 8004a70:	08004d9e 	.word	0x08004d9e

08004a74 <memcpy>:
 8004a74:	440a      	add	r2, r1
 8004a76:	4291      	cmp	r1, r2
 8004a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a7c:	d100      	bne.n	8004a80 <memcpy+0xc>
 8004a7e:	4770      	bx	lr
 8004a80:	b510      	push	{r4, lr}
 8004a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	d1f9      	bne.n	8004a82 <memcpy+0xe>
 8004a8e:	bd10      	pop	{r4, pc}

08004a90 <memmove>:
 8004a90:	4288      	cmp	r0, r1
 8004a92:	b510      	push	{r4, lr}
 8004a94:	eb01 0402 	add.w	r4, r1, r2
 8004a98:	d902      	bls.n	8004aa0 <memmove+0x10>
 8004a9a:	4284      	cmp	r4, r0
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	d807      	bhi.n	8004ab0 <memmove+0x20>
 8004aa0:	1e43      	subs	r3, r0, #1
 8004aa2:	42a1      	cmp	r1, r4
 8004aa4:	d008      	beq.n	8004ab8 <memmove+0x28>
 8004aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aae:	e7f8      	b.n	8004aa2 <memmove+0x12>
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	428a      	cmp	r2, r1
 8004ab6:	d100      	bne.n	8004aba <memmove+0x2a>
 8004ab8:	bd10      	pop	{r4, pc}
 8004aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ac2:	e7f7      	b.n	8004ab4 <memmove+0x24>

08004ac4 <_free_r>:
 8004ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	d044      	beq.n	8004b54 <_free_r+0x90>
 8004aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ace:	9001      	str	r0, [sp, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ad6:	bfb8      	it	lt
 8004ad8:	18e4      	addlt	r4, r4, r3
 8004ada:	f000 f913 	bl	8004d04 <__malloc_lock>
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <_free_r+0x94>)
 8004ae0:	9801      	ldr	r0, [sp, #4]
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	b933      	cbnz	r3, 8004af4 <_free_r+0x30>
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6014      	str	r4, [r2, #0]
 8004aea:	b003      	add	sp, #12
 8004aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af0:	f000 b90e 	b.w	8004d10 <__malloc_unlock>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d908      	bls.n	8004b0a <_free_r+0x46>
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf01      	itttt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	1949      	addeq	r1, r1, r5
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	e7ed      	b.n	8004ae6 <_free_r+0x22>
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b10b      	cbz	r3, 8004b14 <_free_r+0x50>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d9fa      	bls.n	8004b0a <_free_r+0x46>
 8004b14:	6811      	ldr	r1, [r2, #0]
 8004b16:	1855      	adds	r5, r2, r1
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d10b      	bne.n	8004b34 <_free_r+0x70>
 8004b1c:	6824      	ldr	r4, [r4, #0]
 8004b1e:	4421      	add	r1, r4
 8004b20:	1854      	adds	r4, r2, r1
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	d1e0      	bne.n	8004aea <_free_r+0x26>
 8004b28:	681c      	ldr	r4, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	6053      	str	r3, [r2, #4]
 8004b2e:	4421      	add	r1, r4
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	e7da      	b.n	8004aea <_free_r+0x26>
 8004b34:	d902      	bls.n	8004b3c <_free_r+0x78>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6003      	str	r3, [r0, #0]
 8004b3a:	e7d6      	b.n	8004aea <_free_r+0x26>
 8004b3c:	6825      	ldr	r5, [r4, #0]
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf04      	itt	eq
 8004b44:	6819      	ldreq	r1, [r3, #0]
 8004b46:	685b      	ldreq	r3, [r3, #4]
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	bf04      	itt	eq
 8004b4c:	1949      	addeq	r1, r1, r5
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	6054      	str	r4, [r2, #4]
 8004b52:	e7ca      	b.n	8004aea <_free_r+0x26>
 8004b54:	b003      	add	sp, #12
 8004b56:	bd30      	pop	{r4, r5, pc}
 8004b58:	20000208 	.word	0x20000208

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0e      	ldr	r6, [pc, #56]	; (8004b98 <sbrk_aligned+0x3c>)
 8004b60:	460c      	mov	r4, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	4605      	mov	r5, r0
 8004b66:	b911      	cbnz	r1, 8004b6e <sbrk_aligned+0x12>
 8004b68:	f000 f8bc 	bl	8004ce4 <_sbrk_r>
 8004b6c:	6030      	str	r0, [r6, #0]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f8b7 	bl	8004ce4 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d00a      	beq.n	8004b90 <sbrk_aligned+0x34>
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d007      	beq.n	8004b94 <sbrk_aligned+0x38>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f8ac 	bl	8004ce4 <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d101      	bne.n	8004b94 <sbrk_aligned+0x38>
 8004b90:	f04f 34ff 	mov.w	r4, #4294967295
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	2000020c 	.word	0x2000020c

08004b9c <_malloc_r>:
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d905      	bls.n	8004bc4 <_malloc_r+0x28>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	4e2e      	ldr	r6, [pc, #184]	; (8004c80 <_malloc_r+0xe4>)
 8004bc6:	f000 f89d 	bl	8004d04 <__malloc_lock>
 8004bca:	6833      	ldr	r3, [r6, #0]
 8004bcc:	461c      	mov	r4, r3
 8004bce:	bb34      	cbnz	r4, 8004c1e <_malloc_r+0x82>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff ffc2 	bl	8004b5c <sbrk_aligned>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	4604      	mov	r4, r0
 8004bdc:	d14d      	bne.n	8004c7a <_malloc_r+0xde>
 8004bde:	6834      	ldr	r4, [r6, #0]
 8004be0:	4626      	mov	r6, r4
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d140      	bne.n	8004c68 <_malloc_r+0xcc>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4631      	mov	r1, r6
 8004bea:	4638      	mov	r0, r7
 8004bec:	eb04 0803 	add.w	r8, r4, r3
 8004bf0:	f000 f878 	bl	8004ce4 <_sbrk_r>
 8004bf4:	4580      	cmp	r8, r0
 8004bf6:	d13a      	bne.n	8004c6e <_malloc_r+0xd2>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	3503      	adds	r5, #3
 8004bfc:	1a6d      	subs	r5, r5, r1
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f7ff ffa5 	bl	8004b5c <sbrk_aligned>
 8004c12:	3001      	adds	r0, #1
 8004c14:	d02b      	beq.n	8004c6e <_malloc_r+0xd2>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	442b      	add	r3, r5
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e00e      	b.n	8004c3c <_malloc_r+0xa0>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	1b52      	subs	r2, r2, r5
 8004c22:	d41e      	bmi.n	8004c62 <_malloc_r+0xc6>
 8004c24:	2a0b      	cmp	r2, #11
 8004c26:	d916      	bls.n	8004c56 <_malloc_r+0xba>
 8004c28:	1961      	adds	r1, r4, r5
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6025      	str	r5, [r4, #0]
 8004c2e:	bf18      	it	ne
 8004c30:	6059      	strne	r1, [r3, #4]
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	bf08      	it	eq
 8004c36:	6031      	streq	r1, [r6, #0]
 8004c38:	5162      	str	r2, [r4, r5]
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f104 060b 	add.w	r6, r4, #11
 8004c42:	f000 f865 	bl	8004d10 <__malloc_unlock>
 8004c46:	f026 0607 	bic.w	r6, r6, #7
 8004c4a:	1d23      	adds	r3, r4, #4
 8004c4c:	1af2      	subs	r2, r6, r3
 8004c4e:	d0b6      	beq.n	8004bbe <_malloc_r+0x22>
 8004c50:	1b9b      	subs	r3, r3, r6
 8004c52:	50a3      	str	r3, [r4, r2]
 8004c54:	e7b3      	b.n	8004bbe <_malloc_r+0x22>
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	6032      	streq	r2, [r6, #0]
 8004c5e:	605a      	strne	r2, [r3, #4]
 8004c60:	e7ec      	b.n	8004c3c <_malloc_r+0xa0>
 8004c62:	4623      	mov	r3, r4
 8004c64:	6864      	ldr	r4, [r4, #4]
 8004c66:	e7b2      	b.n	8004bce <_malloc_r+0x32>
 8004c68:	4634      	mov	r4, r6
 8004c6a:	6876      	ldr	r6, [r6, #4]
 8004c6c:	e7b9      	b.n	8004be2 <_malloc_r+0x46>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4638      	mov	r0, r7
 8004c74:	f000 f84c 	bl	8004d10 <__malloc_unlock>
 8004c78:	e7a1      	b.n	8004bbe <_malloc_r+0x22>
 8004c7a:	6025      	str	r5, [r4, #0]
 8004c7c:	e7de      	b.n	8004c3c <_malloc_r+0xa0>
 8004c7e:	bf00      	nop
 8004c80:	20000208 	.word	0x20000208

08004c84 <_realloc_r>:
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	4680      	mov	r8, r0
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	b921      	cbnz	r1, 8004c9a <_realloc_r+0x16>
 8004c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4611      	mov	r1, r2
 8004c96:	f7ff bf81 	b.w	8004b9c <_malloc_r>
 8004c9a:	b92a      	cbnz	r2, 8004ca8 <_realloc_r+0x24>
 8004c9c:	f7ff ff12 	bl	8004ac4 <_free_r>
 8004ca0:	4625      	mov	r5, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	f000 f838 	bl	8004d1c <_malloc_usable_size_r>
 8004cac:	4284      	cmp	r4, r0
 8004cae:	4607      	mov	r7, r0
 8004cb0:	d802      	bhi.n	8004cb8 <_realloc_r+0x34>
 8004cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cb6:	d812      	bhi.n	8004cde <_realloc_r+0x5a>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7ff ff6e 	bl	8004b9c <_malloc_r>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0ed      	beq.n	8004ca2 <_realloc_r+0x1e>
 8004cc6:	42bc      	cmp	r4, r7
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4631      	mov	r1, r6
 8004ccc:	bf28      	it	cs
 8004cce:	463a      	movcs	r2, r7
 8004cd0:	f7ff fed0 	bl	8004a74 <memcpy>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fef4 	bl	8004ac4 <_free_r>
 8004cdc:	e7e1      	b.n	8004ca2 <_realloc_r+0x1e>
 8004cde:	4635      	mov	r5, r6
 8004ce0:	e7df      	b.n	8004ca2 <_realloc_r+0x1e>
	...

08004ce4 <_sbrk_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	; (8004d00 <_sbrk_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fc fa6c 	bl	80011cc <_sbrk>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_sbrk_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_sbrk_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000210 	.word	0x20000210

08004d04 <__malloc_lock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	; (8004d0c <__malloc_lock+0x8>)
 8004d06:	f000 b811 	b.w	8004d2c <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	20000214 	.word	0x20000214

08004d10 <__malloc_unlock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	; (8004d18 <__malloc_unlock+0x8>)
 8004d12:	f000 b80c 	b.w	8004d2e <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	20000214 	.word	0x20000214

08004d1c <_malloc_usable_size_r>:
 8004d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d20:	1f18      	subs	r0, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfbc      	itt	lt
 8004d26:	580b      	ldrlt	r3, [r1, r0]
 8004d28:	18c0      	addlt	r0, r0, r3
 8004d2a:	4770      	bx	lr

08004d2c <__retarget_lock_acquire_recursive>:
 8004d2c:	4770      	bx	lr

08004d2e <__retarget_lock_release_recursive>:
 8004d2e:	4770      	bx	lr

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
